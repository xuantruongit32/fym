/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.fym.gui;
import com.fym.model.*;
import java.time.ZoneId;
import java.util.HashSet;
import java.util.Date;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;


/**
 *
 * @author v
 */
public class CategoryPage extends javax.swing.JPanel {
    private BudgetManager b;
    /**
     * Creates new form CategoryPage
     */
    public CategoryPage(BudgetManager b) {
        this.b = b;
        initComponents();
        selectDate.setDate(new Date());
        beginComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        category = new javax.swing.JComboBox<>();
        type = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoryTree = new javax.swing.JTree();
        delete = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        resetCategory = new javax.swing.JButton();
        time = new javax.swing.JComboBox<>();
        selectDate = new com.toedter.calendar.JDateChooser();

        category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryActionPerformed(evt);
            }
        });

        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Income", "Expense" }));
        type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(categoryTree);

        delete.setText("Delete");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        resetCategory.setText("O");
        resetCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCategoryActionPerformed(evt);
            }
        });

        time.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Daily", "Weekly", "Monthly", "Yearly", "All" }));
        time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resetCategory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(selectDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delete)
                        .addGap(18, 18, 18)
                        .addComponent(addButton)))
                .addContainerGap(307, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(resetCategory)
                        .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(selectDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delete)
                        .addComponent(addButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(488, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        addCategory addCategory = new addCategory(b);
        addCategory.setVisible(true);
    }//GEN-LAST:event_addButtonActionPerformed

    private void typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeActionPerformed
        // TODO add your handling code here:
       showComboCategory((String)type.getSelectedItem());
        
    }//GEN-LAST:event_typeActionPerformed

    private void resetCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCategoryActionPerformed
        // TODO add your handling code here:
         showComboCategory((String)type.getSelectedItem());

    }//GEN-LAST:event_resetCategoryActionPerformed

    private void timeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeActionPerformed
        // TODO add your handling code here:
             if(category.getSelectedIndex() != -1)
                createTree((String)category.getSelectedItem(),(String) time.getSelectedItem(), (String) type.getSelectedItem());

    }//GEN-LAST:event_timeActionPerformed

    private void categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryActionPerformed
        // TODO add your handling code here:
         if(category.getSelectedIndex() != -1)
                createTree((String)category.getSelectedItem(),(String) time.getSelectedItem(), (String) type.getSelectedItem());                     
    }//GEN-LAST:event_categoryActionPerformed
    private void showComboCategory(String type){
        HashSet<String> data;
        category.removeAllItems();
        if (type.equals("Income"))
            data = b.getCategoriesIncome();
        else
            data = b.getCategoriesExpense();
        for(String c:data)
            category.addItem(c);
            
    }
    private void beginComboBox(){
        HashSet<String> dataCategory = b.getCategoriesIncome();
        for (String c:dataCategory)
            category.addItem(c);
    }
    private void createTree(String category, String time, String type){
    DefaultMutableTreeNode name = new DefaultMutableTreeNode("Name: "+category);
    String totalIncome;
    String totalExpense;
   if (type.equals("Income")){
       System.out.println("hHHHHHHHHHHHHHHHH");
       if (time.equals("Daily")) {
           totalIncome = String.valueOf(b.totalIncomeDaily(selectDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), category));
       } else if (time.equals("Weekly")) {
           totalIncome = String.valueOf(b.totalIncomeWeekly(selectDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), category));
       } else if (time.equals("Monthly")) {
           totalIncome = String.valueOf(b.totalIncomeMonthly(selectDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), category));
       } else if (time.equals("Yearly")) {
           totalIncome = String.valueOf(b.totalIncomeYearly(selectDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), category));
       } else {
           totalIncome = String.valueOf(b.totalIncomeAll(category));
       }
       DefaultMutableTreeNode totalIncomeNode = new DefaultMutableTreeNode("Total Income:  " + totalIncome);
       name.add(totalIncomeNode);
       categoryTree.setModel(new DefaultTreeModel(name));   
   }
    if (type.equals("Expense")){
       if (time.equals("Daily")) {
           totalExpense = String.valueOf(b.totalExpenseDaily(selectDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), category));
       } else if (time.equals("Weekly")) {
           totalExpense = String.valueOf(b.totalExpenseWeekly(selectDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), category));
       } else if (time.equals("Monthly")) {
           totalExpense = String.valueOf(b.totalExpenseMonthly(selectDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), category));
       } else if (time.equals("Yearly")) {
           totalExpense = String.valueOf(b.totalExpenseYearly(selectDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), category));

       } else {
           totalExpense = String.valueOf(b.totalExpenseAll(category));
       }
       DefaultMutableTreeNode totalExpenseNode = new DefaultMutableTreeNode("Total Expense:  " + totalExpense);
       name.add(totalExpenseNode);
       categoryTree.setModel(new DefaultTreeModel(name));   
   }

   
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox<String> category;
    private javax.swing.JTree categoryTree;
    private javax.swing.JButton delete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton resetCategory;
    private com.toedter.calendar.JDateChooser selectDate;
    private javax.swing.JComboBox<String> time;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables
}
